
package _KIND_LOWERCASE_

import (
	"context"
	"reflect"
	"time"
	"net/http"
	"fmt"

	knappek_API_VERSION_ "github.com/Knappek/mongodbatlas-operator/pkg/apis/knappek/_API_VERSION_"
	"github.com/Knappek/mongodbatlas-operator/pkg/config"

	ma "github.com/akshaykarle/go-mongodbatlas/mongodbatlas"
	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
	logf "sigs.k8s.io/controller-runtime/pkg/runtime/log"
	"sigs.k8s.io/controller-runtime/pkg/source"
)

var log = logf.Log.WithName("controller__KIND_LOWERCASE_")

/**
* USER ACTION REQUIRED: This is a scaffold file intended for the user to modify with their own Controller
* business logic.  Delete these comments after modifying this file.*
 */

// Add creates a new _KIND_ Controller and adds it to the Manager. The Manager will set fields on the Controller
// and Start it when the Manager is Started.
func Add(mgr manager.Manager) error {
	return add(mgr, newReconciler(mgr))
}

// newReconciler returns a new reconcile.Reconciler
func newReconciler(mgr manager.Manager) reconcile.Reconciler {
	return &Reconcile_KIND_{client: mgr.GetClient(), scheme: mgr.GetScheme(), atlasClient: config.GetAtlasClient()}
}

// add adds a new Controller to mgr with r as the reconcile.Reconciler
func add(mgr manager.Manager, r reconcile.Reconciler) error {
	// Create a new controller
	c, err := controller.New("_KIND_LOWERCASE_-controller", mgr, controller.Options{Reconciler: r})
	if err != nil {
		return err
	}

	// Watch for changes to primary resource _KIND_
	err = c.Watch(&source.Kind{Type: &knappek_API_VERSION_._KIND_{}}, &handler.EnqueueRequestForObject{})
	if err != nil {
		return err
	}

	return nil
}

var _ reconcile.Reconciler = &Reconcile_KIND_{}

// Reconcile_KIND_ reconciles a _KIND_ object
type Reconcile_KIND_ struct {
	// This client, initialized using mgr.Client() above, is a split client
	// that reads objects from the cache and writes to the apiserver
	client      client.Client
	scheme      *runtime.Scheme
	atlasClient *ma.Client
}

// Reconcile reads that state of the _KIND_ object and makes changes based on the state read
// and what is in the _KIND_.Spec
// TODO(user): Modify this Reconcile function to implement your Controller logic.  This example creates
// a Pod as an example
// Note:
// The Controller will requeue the Request to be processed again if the returned error is non-nil or
// Result.Requeue is true, otherwise upon completion it will remove the work from the queue.
func (r *Reconcile_KIND_) Reconcile(request reconcile.Request) (reconcile.Result, error) {
	// Fetch the _KIND_ atlas_KIND_SHORT_
	atlas_KIND_SHORT_ := &knappek_API_VERSION_._KIND_{}
	err := r.client.Get(context.TODO(), request.NamespacedName, atlas_KIND_SHORT_)
	if err != nil {
		if errors.IsNotFound(err) {
			// Request object not found, could have been deleted after reconcile request.
			// Owned objects are automatically garbage collected. For additional cleanup logic use finalizers.
			// Return and don't requeue
			return reconcile.Result{}, nil
		}
		// Error reading the object - requeue the request.
		return reconcile.Result{}, err
	}

	projectName := atlas_KIND_SHORT_.Spec.ProjectName
	atlasProject := &knappek_API_VERSION_.MongoDBAtlasProject{}
	atlasProjectNamespacedName := types.NamespacedName{
		Name:      projectName,
		Namespace: atlas_KIND_SHORT_.Namespace,
	}

	err = r.client.Get(context.TODO(), atlasProjectNamespacedName, atlasProject)
	if err != nil {
		return reconcile.Result{}, err
	}

	groupID := atlasProject.Status.ID
	// Define default logger
	reqLogger := log.WithValues("Request.Namespace", request.Namespace, "_KIND_.Name", request.Name, "_KIND_.GroupID", groupID)

	// Check if the _KIND_ CR was marked to be deleted
	is_KIND_ToBeDeleted := atlas_KIND_SHORT_.GetDeletionTimestamp() != nil
	if is_KIND_ToBeDeleted {
		// check if Delete request has already been sent to the MongoDB Atlas API
		// 
		// TODO
		//

		// wait until _KIND_ has been deleted successfully
		// 
		// TODO
		//
		// if err == nil, _KIND_ still exists - Requeue after 20 seconds
		return reconcile.Result{RequeueAfter: time.Second * 20}, nil
	}

	// Create a new _KIND_
	is_KIND_ToBeCreated := reflect.DeepEqual(atlas_KIND_SHORT_.Status, knappek_API_VERSION_._KIND_Status{})
	if is_KIND_ToBeCreated {
		err = create_KIND_(reqLogger, r.atlasClient, atlas_KIND_SHORT_, atlasProject)
		if err != nil {
			return reconcile.Result{}, err
		}
		err = r.client.Status().Update(context.TODO(), atlas_KIND_SHORT_)
		if err != nil {
			return reconcile.Result{}, err
		}
		// Add finalizer for this CR
		if err := r.addFinalizer(reqLogger, atlas_KIND_SHORT_); err != nil {
			return reconcile.Result{}, err
		}
		// Requeue after 30 seconds and check again for the status until CR can be deleted
		return reconcile.Result{RequeueAfter: time.Second * 30}, nil
	}

	// update existing _KIND_
	is_KIND_ToBeUpdated := knappek_API_VERSION_.Is_KIND_ToBeUpdated(atlas_KIND_SHORT_.Spec._KIND_RequestBody, atlas_KIND_SHORT_.Status._KIND_RequestBody)
	if is_KIND_ToBeUpdated {
		err = update_KIND_(reqLogger, r.atlasClient, atlas_KIND_SHORT_, atlasProject)
		if err != nil {
			return reconcile.Result{}, err
		}
		err = r.client.Status().Update(context.TODO(), atlas_KIND_SHORT_)
		if err != nil {
			return reconcile.Result{}, err
		}
		// Requeue after 30 seconds and check again for the status until CR can be deleted
		return reconcile.Result{RequeueAfter: time.Second * 30}, nil
	}

	// if no Create/Update/Delete command apply, then fetch the status
	err = get_KIND_(reqLogger, r.atlasClient, atlas_KIND_SHORT_)
	if err != nil {
		return reconcile.Result{}, err
	}
	err = r.client.Status().Update(context.TODO(), atlas_KIND_SHORT_)
	if err != nil {
		return reconcile.Result{}, err
	}

	// Requeue to periodically reconcile the CR _KIND_ in order to recreate a manually deleted Atlas _KIND_SHORT_
	return reconcile.Result{RequeueAfter: time.Second * 30}, nil
}

func create_KIND_(reqLogger logr.Logger, atlasClient *ma.Client, cr *knappek_API_VERSION_._KIND_, ap *knappek_API_VERSION_.MongoDBAtlasProject) error {
	groupID := ap.Status.ID
	name := cr.Name
	params := get_KIND_SHORT_Params(cr)
	c, resp, err := atlasClient._KIND_SHORT_s.Create(groupID, &params)
	if err != nil {
		return fmt.Errorf("Error creating _KIND_SHORT_ %v: %s", name, err)
	}
	if resp.StatusCode == http.StatusOK {
		reqLogger.Info("_KIND_SHORT_ created.")
		return updateCRStatus(reqLogger, cr, c)
	}
	return fmt.Errorf("(%v) Error creating _KIND_SHORT_ %s: %s", resp.StatusCode, name, err)
}

func update_KIND_(reqLogger logr.Logger, atlasClient *ma.Client, cr *knappek_API_VERSION_._KIND_, ap *knappek_API_VERSION_.MongoDBAtlasProject) error {
	groupID := ap.Status.ID
	name := cr.Name
	params := get_KIND_SHORT_Params(cr)
	c, resp, err := atlasClient._KIND_SHORT_s.Update(groupID, name, &params)
	if err != nil {
		return fmt.Errorf("Error updating _KIND_SHORT_ %v: %s", name, err)
	}
	if resp.StatusCode == http.StatusOK {
		reqLogger.Info("_KIND_SHORT_ updated.")
		return updateCRStatus(reqLogger, cr, c)
	}
	return fmt.Errorf("(%v) Error updating _KIND_SHORT_ %s: %s", resp.StatusCode, name, err)
}

func delete_KIND_(reqLogger logr.Logger, atlasClient *ma.Client, cr *knappek_API_VERSION_._KIND_) error {
	groupID := cr.Status.GroupID
	name := cr.Name
	// cluster exists and can be deleted
	resp, err := atlasClient._KIND_SHORT_s.Delete(groupID, name)
	if err != nil {
		if resp.StatusCode == http.StatusNotFound {
			reqLogger.Info("_KIND_SHORT_ does not exist in Atlas. Deleting CR.")
			// CR can be deleted - Requeue
			return nil
		}
		return fmt.Errorf("(%v) Error deleting _KIND_SHORT_ %s: %s", resp.StatusCode, name, err)
	}
	if resp.StatusCode == http.StatusOK {
		reqLogger.Info("Sent request to delete _KIND_SHORT_.")
		return nil
	}
	return fmt.Errorf("(%v) Error deleting _KIND_SHORT_ %s: %s", resp.StatusCode, name, err)
}

func get_KIND_(reqLogger logr.Logger, atlasClient *ma.Client, cr *knappek_API_VERSION_._KIND_) error {
	groupID := cr.Status.GroupID
	name := cr.Name
	c, resp, err := atlasClient._KIND_SHORT_s.Get(groupID, name)
	if err != nil {
		return fmt.Errorf("(%v) Error fetching _KIND_SHORT_ information %s: %s", resp.StatusCode, name, err)
	}
	err = updateCRStatus(reqLogger, cr, c)
	if err != nil {
		return fmt.Errorf("Error updating _KIND_SHORT_ CR Status: %s", err)
	}
	return nil
}

func get_KIND_SHORT_Params(cr *knappek_API_VERSION_._KIND_) ma._KIND_SHORT_ {
	return ma._KIND_SHORT_{
		//
		// TODO
		//
	}
}

func updateCRStatus(reqLogger logr.Logger, cr *knappek_API_VERSION_._KIND_, c *ma._KIND_SHORT_) error {
	// update status field in CR
	cr.Status.ID = c.ID
	cr.Status.GroupID = c.GroupID
	cr.Status.Name = c.Name
	//
	// TODO
	//	
	return nil
}

func (r *Reconcile_KIND_) addFinalizer(reqLogger logr.Logger, cr *knappek_API_VERSION_._KIND_) error {
	if len(cr.GetFinalizers()) < 1 && cr.GetDeletionTimestamp() == nil {
		cr.SetFinalizers([]string{"finalizer.knappek.com"})

		// Update CR
		err := r.client.Update(context.TODO(), cr)
		if err != nil {
			reqLogger.Error(err, "Failed to update _KIND_SHORT_ with finalizer")
			return err
		}
	}
	return nil
}
