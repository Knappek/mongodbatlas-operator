
package _KIND_LOWERCASE_

import (
	"context"
	"fmt"
	"net/http"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"

	ma "github.com/akshaykarle/go-mongodbatlas/mongodbatlas"

	knappek_API_VERSION_ "github.com/Knappek/mongodbatlas-operator/pkg/apis/knappek/_API_VERSION_"
	testutil "github.com/Knappek/mongodbatlas-operator/pkg/controller/test"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/kubernetes/scheme"
	"sigs.k8s.io/controller-runtime/pkg/client/fake"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
	logf "sigs.k8s.io/controller-runtime/pkg/runtime/log"
)

var (
	namespace             = "mongodbatlas"
	organizationID        = "testOrgID"
	projectName           = "unittest-project"
	projectID             = "5a0a1e7e0f2912c554080ae6"
	resourceName 		  = "<TODO: Name>"
)

func TestCreate_KIND_LOWERCASE_(t *testing.T) {
	// Set the logger to development mode for verbose logs.
	logf.SetLogger(logf.ZapLogger(true))

	// A MongoDBAtlasProject resource with metadata and spec.
	mongodbatlasproject := testutil.CreateAtlasProject(projectName, projectID, namespace, organizationID)

	// A _KIND_LOWERCASE_ resource with metadata and spec.
	_KIND_LOWERCASE_ := &knappek_API_VERSION_._KIND_{
		ObjectMeta: metav1.ObjectMeta{
			Name:      resourceName,
			Namespace: namespace,
		},
		Spec: knappek_API_VERSION_._KIND_Spec{
			ProjectName: projectName,
			_KIND_RequestBody: knappek_API_VERSION_._KIND_RequestBody{
				//
				// TODO
				//
			},
		},
	}

	// Objects to track in the fake client.
	objs := []runtime.Object{
		_KIND_LOWERCASE_,
		mongodbatlasproject,
	}

	// Register operator types with the runtime scheme.
	s := scheme.Scheme
	s.AddKnownTypes(knappek_API_VERSION_.SchemeGroupVersion, _KIND_LOWERCASE_, mongodbatlasproject)

	// Create a fake k8s client to mock API calls.
	k8sClient := fake.NewFakeClient(objs...)
	// Create a fake atlas client to mock API calls.
	// atlasClient, server := test.NewAtlasFakeClient(t)
	httpClient, mux, server := testutil.Server()
	defer server.Close()
	atlasClient := ma.NewClient(httpClient)

	// Post request for _KIND_
	mux.HandleFunc("/api/atlas/v1.0/<TODO>", func(w http.ResponseWriter, r *http.Request) {
		testutil.AssertMethod(t, "POST", r)
		w.Header().Set("Content-Type", "application/json")
		expectedBody := map[string]interface{}{
			//
			// TODO
			//
		}
		testutil.AssertReqJSON(t, expectedBody, r)
		fmt.Fprintf(w, `{
			//
			// TODO
			//
		}`)
	})

	// Create a Reconcile_KIND_ object with the scheme and fake client.
	r := &Reconcile_KIND_{client: k8sClient, scheme: s, atlasClient: atlasClient}

	// Mock request to simulate Reconcile() being called on an event for a
	// watched resource .
	req := reconcile.Request{
		NamespacedName: types.NamespacedName{
			Name:      resourceName,
			Namespace: namespace,
		},
	}
	res, err := r.Reconcile(req)
	if err != nil {
		t.Fatalf("reconcile: (%v)", err)
	}
	assert.Equal(t, time.Second*30, res.RequeueAfter)

	// Check if the CR has been created and has the correct status.
	cr := &knappek_API_VERSION_._KIND_{}
	err = k8sClient.Get(context.TODO(), req.NamespacedName, cr)
	if err != nil {
		t.Fatalf("get _KIND_LOWERCASE_: (%v)", err)
	}
	// 
	// TODO ...
	//
}

func TestDelete_KIND_LOWERCASE_(t *testing.T) {
	// Set the logger to development mode for verbose logs.
	logf.SetLogger(logf.ZapLogger(true))

	// A MongoDBAtlasProject resource with metadata and spec.
	mongodbatlasproject := testutil.CreateAtlasProject(projectName, projectID, namespace, organizationID)

	// A _KIND_LOWERCASE_ resource with metadata and spec.
	_KIND_LOWERCASE_ := &knappek_API_VERSION_._KIND_{
		ObjectMeta: metav1.ObjectMeta{
			Name:              resourceName,
			Namespace:         namespace,
			DeletionTimestamp: &metav1.Time{Time: time.Now()},
			Finalizers:        []string{"finalizer.knappek.com"},
		},
		Spec: knappek_API_VERSION_._KIND_Spec{
			ProjectName: projectName,
			_KIND_RequestBody: knappek_API_VERSION_._KIND_RequestBody{
				//
				// TODO
				//
			},
		},
		Status: knappek_API_VERSION_._KIND_Status{
			//
			// TODO: some other read only values
			//
			_KIND_RequestBody: knappek_API_VERSION_._KIND_RequestBody{
				//
				// TODO
				//
			},
		},
	}

	// Objects to track in the fake client.
	objs := []runtime.Object{
		_KIND_LOWERCASE_,
		mongodbatlasproject,
	}

	// Register operator types with the runtime scheme.
	s := scheme.Scheme
	s.AddKnownTypes(knappek_API_VERSION_.SchemeGroupVersion, _KIND_LOWERCASE_, mongodbatlasproject)

	// Create a fake k8s client to mock API calls.
	k8sClient := fake.NewFakeClient(objs...)
	// Create a fake atlas client to mock API calls.
	// atlasClient, server := test.NewAtlasFakeClient(t)
	httpClient, mux, server := testutil.Server()
	defer server.Close()
	atlasClient := ma.NewClient(httpClient)

	// Delete
	mux.HandleFunc("/api/atlas/v1.0/groups/<TODO>", func(w http.ResponseWriter, r *http.Request) {
		testutil.AssertMethod(t, "DELETE", r)
		fmt.Fprintf(w, `{}`)
	})

	// Create a Reconcile_KIND_ object with the scheme and fake client.
	r := &Reconcile_KIND_{client: k8sClient, scheme: s, atlasClient: atlasClient}

	// Mock request to simulate Reconcile() being called on an event for a
	// watched resource .
	req := reconcile.Request{
		NamespacedName: types.NamespacedName{
			Name:      resourceName,
			Namespace: namespace,
		},
	}
	res, err := r.Reconcile(req)
	if err != nil {
		t.Fatalf("reconcile: (%v)", err)
	}
	assert.Equal(t, time.Second*20, res.RequeueAfter)

	// Check if the CR has been updated and has the correct status.
	cr := &knappek_API_VERSION_._KIND_{}
	err = k8sClient.Get(context.TODO(), req.NamespacedName, cr)
	if err != nil {
		t.Fatalf("get _KIND_LOWERCASE_: (%v)", err)
	}

	httpClient2, mux2, server2 := testutil.Server()
	defer server2.Close()
	atlasClient2 := ma.NewClient(httpClient2)
	// GET: Simulate a new reconcile where cluster has been deleted successfully
	mux2.HandleFunc("/api/atlas/v1.0/groups/<TODO>", func(w http.ResponseWriter, r *http.Request) {
		testutil.AssertMethod(t, "GET", r)
		http.Error(w, http.StatusText(http.StatusNotFound), http.StatusNotFound)
	})

	// Create a Reconcile_KIND_ object with the scheme and fake client.
	r2 := &Reconcile_KIND_{client: k8sClient, scheme: s, atlasClient: atlasClient2}

	res2, err := r2.Reconcile(req)
	if err != nil {
		t.Fatalf("reconcile: (%v)", err)
	}
	assert.Equal(t, reconcile.Result{}, res2)
	cr = &knappek_API_VERSION_._KIND_{}
	err = k8sClient.Get(context.TODO(), req.NamespacedName, cr)
	if err != nil {
		t.Fatalf("get _KIND_LOWERCASE_: (%v)", err)
	}
	// verify that Finalizer has been removed
	assert.Nil(t, cr.ObjectMeta.GetFinalizers())
}

func TestUpdate_KIND_LOWERCASE_(t *testing.T) {
	// Set the logger to development mode for verbose logs.
	logf.SetLogger(logf.ZapLogger(true))

	// A MongoDBAtlasProject resource with metadata and spec.
	mongodbatlasproject := testutil.CreateAtlasProject(projectName, projectID, namespace, organizationID)

	// updates
	//
	// TODO: some updates
	//

	// A _KIND_LOWERCASE_ resource with metadata and spec.
	_KIND_LOWERCASE_ := &knappek_API_VERSION_._KIND_{
		ObjectMeta: metav1.ObjectMeta{
			Name:      resourceName,
			Namespace: namespace,
		},
		Spec: knappek_API_VERSION_._KIND_Spec{
			ProjectName: projectName,
			_KIND_RequestBody: knappek_API_VERSION_._KIND_RequestBody{
				//
				// TODO
				//
			},
		},
		Status: knappek_API_VERSION_._KIND_Status{
			//
			// TODO: some other read only values
			//
			_KIND_RequestBody: knappek_API_VERSION_._KIND_RequestBody{
				//
				// TODO
				//
			},
		},
	}

	// Objects to track in the fake client.
	objs := []runtime.Object{
		_KIND_LOWERCASE_,
		mongodbatlasproject,
	}

	// Register operator types with the runtime scheme.
	s := scheme.Scheme
	s.AddKnownTypes(knappek_API_VERSION_.SchemeGroupVersion, _KIND_LOWERCASE_, mongodbatlasproject)

	// Create a fake k8s client to mock API calls.
	k8sClient := fake.NewFakeClient(objs...)
	// Create a fake atlas client to mock API calls.
	// atlasClient, server := test.NewAtlasFakeClient(t)
	httpClient, mux, server := testutil.Server()
	defer server.Close()
	atlasClient := ma.NewClient(httpClient)
	// Construct Update API call
	mux.HandleFunc("/api/atlas/v1.0/groups/<TODO>", func(w http.ResponseWriter, r *http.Request) {
		testutil.AssertMethod(t, "PATCH", r)
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{
			//
			// TODO
			//
		}`)
	})
	// Create a Reconcile_KIND_ object with the scheme and fake client.
	r := &Reconcile_KIND_{client: k8sClient, scheme: s, atlasClient: atlasClient}

	// Mock request to simulate Reconcile() being called on an event for a
	// watched resource .
	req := reconcile.Request{
		NamespacedName: types.NamespacedName{
			Name:      resourceName,
			Namespace: namespace,
		},
	}
	res, err := r.Reconcile(req)
	if err != nil {
		t.Fatalf("reconcile: (%v)", err)
	}
	assert.Equal(t, time.Second*30, res.RequeueAfter)

	// Check if the CR has been created and has the correct status.
	cr := &knappek_API_VERSION_._KIND_{}
	err = k8sClient.Get(context.TODO(), req.NamespacedName, cr)
	if err != nil {
		t.Fatalf("get _KIND_LOWERCASE_: (%v)", err)
	}
	//
	// TODO: some assertions
	//
}

func TestNoUpdate_KIND_LOWERCASE_(t *testing.T) {
	// Set the logger to development mode for verbose logs.
	logf.SetLogger(logf.ZapLogger(true))

	// A MongoDBAtlasProject resource with metadata and spec.
	mongodbatlasproject := testutil.CreateAtlasProject(projectName, projectID, namespace, organizationID)

	// A _KIND_LOWERCASE_ resource with metadata and spec. This Spec contains only the bare minimum, other values
	// will be filled with default values
	_KIND_LOWERCASE_ := &knappek_API_VERSION_._KIND_{
		ObjectMeta: metav1.ObjectMeta{
			Name:      resourceName,
			Namespace: namespace,
		},
		Spec: knappek_API_VERSION_._KIND_Spec{
			ProjectName: projectName,
			_KIND_RequestBody: knappek_API_VERSION_._KIND_RequestBody{
				//
				// TODO: minimum requirements for the spec
				//
			},
		},
		Status: knappek_API_VERSION_._KIND_Status{
			//
			// TODO: some other read only values
			//
			_KIND_RequestBody: knappek_API_VERSION_._KIND_RequestBody{
				//
				// TODO
				//
			},
		},
	}

	// Objects to track in the fake client.
	objs := []runtime.Object{
		_KIND_LOWERCASE_,
		mongodbatlasproject,
	}

	// Register operator types with the runtime scheme.
	s := scheme.Scheme
	s.AddKnownTypes(knappek_API_VERSION_.SchemeGroupVersion, _KIND_LOWERCASE_, mongodbatlasproject)

	// Create a fake k8s client to mock API calls.
	k8sClient := fake.NewFakeClient(objs...)
	// Create a fake atlas client to mock API calls.
	// atlasClient, server := test.NewAtlasFakeClient(t)
	httpClient, mux, server := testutil.Server()
	defer server.Close()
	atlasClient := ma.NewClient(httpClient)
	// Construct Update API call
	mux.HandleFunc("/api/atlas/v1.0/groups/<TODO>", func(w http.ResponseWriter, r *http.Request) {
		testutil.AssertMethod(t, "GET", r)
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintf(w, `{
			//
			// TODO
			//
		}`)
	})
	// Create a Reconcile_KIND_ object with the scheme and fake client.
	r := &Reconcile_KIND_{client: k8sClient, scheme: s, atlasClient: atlasClient}

	// Mock request to simulate Reconcile() being called on an event for a
	// watched resource .
	req := reconcile.Request{
		NamespacedName: types.NamespacedName{
			Name:      resourceName,
			Namespace: namespace,
		},
	}
	res, err := r.Reconcile(req)
	if err != nil {
		t.Fatalf("reconcile: (%v)", err)
	}
	assert.Equal(t, time.Second*30, res.RequeueAfter)

	// Check if the CR has been created and has the correct status.
	cr := &knappek_API_VERSION_._KIND_{}
	err = k8sClient.Get(context.TODO(), req.NamespacedName, cr)
	if err != nil {
		t.Fatalf("get _KIND_LOWERCASE_: (%v)", err)
	}
	//
	// TODO: assert that resource has not been updated
	//
}
